<?xml version="1.0"?>

<robot name="uav" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Arguments -->
  <xacro:arg name="manipulator_type" default="none" />
  <xacro:property name="manipulator_type" value="$(arg manipulator_type)" />
  <xacro:arg name="manipulator_tool" default="none" />
  <xacro:property name="manipulator_tool" value="$(arg manipulator_tool)" />
  <xacro:arg name="turn_off_all_collisions" default="false" />
  <xacro:property name="turn_off_all_collisions" value="$(arg turn_off_all_collisions)" />
  <xacro:arg name="collision_bitmask" default="-1" />
  <xacro:property name="collision_bitmask" value="$(arg collision_bitmask)" />
  <!-- Properties -->
  <xacro:property name="rotor_velocity_slowdown_sim" value="15" />
  <xacro:property name="mesh_file" value="3DR_Arducopter.dae" />
  <xacro:property name="mass" value="2.083" />  <!-- [kg] -->
  <xacro:property name="body_width" value="0.1" /> <!-- [m] -->
  <xacro:property name="body_height" value="0.20842" /> <!-- [m] -->
  <xacro:property name="mass_rotor" value="0.01" /> <!-- [kg] -->
  <xacro:property name="arm_length" value="0.314" /> <!-- [m] -->
  <xacro:property name="rotor_offset_top" value="0.04579" /> <!-- [m] -->
  <xacro:property name="radius_rotor" value="0.1524" /> <!-- [m] -->
  <xacro:property name="motor_constant" value="8.54858e-06" /> <!-- [kg*m/s^2] -->
  <xacro:property name="moment_constant" value="0.016" /> <!-- [m] -->
  <xacro:property name="time_constant_up" value="0.0125" /> <!-- [s] -->
  <xacro:property name="time_constant_down" value="0.025" /> <!-- [s] -->
  <xacro:property name="max_rot_velocity" value="1475" /> <!-- [rad/s] -->
  <xacro:property name="sin45" value="0.7071068" />
  <xacro:property name="cos45" value="0.7071068" />
  <xacro:property name="rotor_drag_coefficient" value="8.06428e-05" />
  <xacro:property name="rolling_moment_coefficient" value="0.000001" />

  <!-- aditional arm properties -->
  <xacro:property name="arm_offset" value="0.1" /> <!-- [m] 0.0457-->

  <!-- Moving masses properties -->

  <xacro:property name="mm_mass" value="0.208" />
  <xacro:property name="mm_dimension" value="0.035" />
  <xacro:property name="mm_ver_offset" value="0.0" />
  <xacro:property name="mm_path_len" value="0.17" />

  <xacro:property name="imu_mass" value="0.02"/>
  <xacro:property name="imu_size" value="0.01"/>

  <xacro:property name="sin45" value="0.7071" />
  <xacro:property name="cos45" value="0.7071" />
  <xacro:property name="PI" value="3.1415926535897931" />
  <xacro:property name="tilt_angle" value="0.0"/>


  <!-- Property Blocks -->
  <xacro:property name="body_inertia">
  <!--<inertia ixx="0.00528525" ixy="0.0" ixz="0.0" iyy="0.00528250" iyz="0.0" izz="0.0104" />  [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] -->
    <inertia ixx="0.0826944" ixy="0.0" ixz="0.0" iyy="0.0826944" iyz="0.0" izz="0.0104" /> <!-- [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] identificirani Ixx Iyy-->
  </xacro:property>

  <!-- inertia of a single rotor, assuming it is a cuboid. Height=5mm, width=31mm -->
  <xacro:property name="rotor_inertia">
    <inertia
    ixx="${1/12 * mass_rotor * (0.031 * 0.031 + 0.005 * 0.005) * rotor_velocity_slowdown_sim}"
    iyy="${1/12 * mass_rotor * (4 * radius_rotor * radius_rotor + 0.005 * 0.005) * rotor_velocity_slowdown_sim}"
    izz="${1/12 * mass_rotor * (4 * radius_rotor * radius_rotor + 0.031 * 0.031) * rotor_velocity_slowdown_sim}"
    ixy="0.0" ixz="0.0"  iyz="0.0" /> <!-- [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] -->
  </xacro:property>

  <!-- Included URDF Files -->
  <xacro:include filename="$(find mmuav_description)/urdf/multirotor_base.urdf.xacro" />

  <!-- Moving mass inertia block -->
  <xacro:property name="movable_mass_inertia">
     <inertia
     ixx="${mm_mass * (mm_path_len/2 * mm_path_len/2)}"
     iyy="${mm_mass * (mm_path_len/2 * mm_path_len/2)}"
     izz="${mm_mass * (mm_path_len/2 * mm_path_len/2)}"
     ixy="0.0" ixz="0.0"  iyz="0.0" /> <!-- [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] -->
  </xacro:property>

  <!-- IMU inertia (Pixhawk) -->
  <xacro:property name="imu_inertia">
    <inertia
    ixx="${(imu_mass * imu_size * imu_size)/6}"
    iyy="${(imu_mass * imu_size * imu_size)/6}"
    izz="${(imu_mass * imu_size * imu_size)/6}"
    ixy="0.0" ixz="0.0"  iyz="0.0" /> <!-- [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] [kg*m^2] -->
  </xacro:property>

  <!-- Instantiate multirotor_base_macro once -->
  <xacro:multirotor_base_macro
    robot_namespace="$(arg name)"
    mass="${mass}"
    body_width="${body_width}"
    body_height="${body_height}"
    mesh_file="${mesh_file}">
    <origin xyz="0 0 0" rpy="0 0 ${-PI/4}"/>
    <xacro:insert_block name="body_inertia" />
  </xacro:multirotor_base_macro>

  <!-- Instantiate rotors -->
  <xacro:vertical_rotor
    robot_namespace="$(arg name)"
    suffix="front_left"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="0"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red">
    <!--<origin xyz="${cos45*arm_length} ${sin45*arm_length} ${rotor_offset_top}" rpy="0 0 0" />-->
    <origin xyz="${1*arm_length} ${0*arm_length} ${rotor_offset_top}" rpy="0 ${-tilt_angle} 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor
    robot_namespace="$(arg name)"
    suffix="front_right"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="3"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Blue">
    <!--<origin xyz="${cos45*arm_length} ${-sin45*arm_length} ${rotor_offset_top}" rpy="0 0 0" />-->
    <origin xyz="${0*arm_length} ${-1*arm_length} ${rotor_offset_top}" rpy="${-tilt_angle} 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor
    robot_namespace="$(arg name)"
    suffix="back_left"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="1"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Blue">
    <!--<origin xyz="${-cos45*arm_length} ${sin45*arm_length} ${rotor_offset_top}" rpy="0 0 0" />-->
    <origin xyz="${0*arm_length} ${1*arm_length} ${rotor_offset_top}" rpy="${tilt_angle} 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor
    robot_namespace="$(arg name)"
    suffix="back_right"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="2"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red">
    <!--<origin xyz="${-cos45*arm_length} ${-sin45*arm_length} ${rotor_offset_top}" rpy="0 0 0" />-->
    <origin xyz="${-1*arm_length} ${0*arm_length} ${rotor_offset_top}" rpy="0 ${tilt_angle} 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

<!--
  <xacro:cam 
      namespace="$(arg name)"
      parent="base_link" 
      camera_link="0.01" 
      camera_mass="0.01">
      <origin xyz="0 0 -0.2" rpy="0 ${PI/2} ${-PI/4}"/>
      <inertia ixx="0.001"  ixy="0.0"  ixz="0.0"
               iyy="0.001"  iyz="0.0"  izz="0.001" />
    </xacro:cam>
-->
  <xacro:if value="${'wp_manipulator' == manipulator_type}">

    <!-- Try to include manipulator -->
    <xacro:include filename="$(find aerial_manipulators_description)/urdf/manipulator_base.urdf.xacro" />
    <xacro:wp_manipulator parent="base_link">
      <origin xyz="0 0 0.075" rpy="${pi/2} 0 ${pi}"/>
    </xacro:wp_manipulator>

    <xacro:transmisija
      trans_number="1"
      joint_name="joint1">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="2"
      joint_name="joint2">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="3"
      joint_name="joint3">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="4"
      joint_name="joint4">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="5"
      joint_name="joint5">
    </xacro:transmisija>

    <xacro:if value="${'camera' == manipulator_tool}">
      <xacro:property name="camera_link" value="0.02" />
      <xacro:property name="camera_inertia">
        <inertia
        ixx="1e-8"
        iyy="1e-8"
        izz="1e-8"
        ixy="0.0" ixz="0.0" iyz="0.0" />
      </xacro:property>
      <xacro:property name="camera_mass" value="1e-5"/>

      <xacro:cam
        camera_link="${camera_link}"
        camera_mass="${camera_mass}"
        parent="end_effector_base">
        <origin xyz="0 0 0" rpy="${PI} 0 0"/>
        <xacro:insert_block name="camera_inertia"/>
      </xacro:cam>
    </xacro:if>

    <!-- Enable the Joint Feedback -->
    <gazebo reference="joint5">
      <stopCfm>0.08</stopCfm>
      <stopErp>0.2</stopErp>
      <implicitSpringDamper>true</implicitSpringDamper>
      <provideFeedback>true</provideFeedback>
    </gazebo>

    <!-- The ft_sensor plugin  -->
    <gazebo>
      <plugin name="ft_sensor" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>1000.0</updateRate>
        <robotNamespace>$(arg name)/wp_manipulator</robotNamespace>
        <topicName>force_sensor/ft_sensor</topicName> 
        <jointName>joint5</jointName>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0001</stddev> <!-- change this to simulate noise --> 
        </noise>
      </plugin>
    </gazebo>

    <xacro:if value="${'rod' == manipulator_tool or 'rod_with_camera' == manipulator_tool or 'rod_with_kinect' == manipulator_tool}">
      <!-- Rod link -->
      <gazebo reference="rod">
        <collision>
          <surface>
            <contact>
              <collide_bitmask>${collision_bitmask}</collide_bitmask>
            </contact>
          </surface>
        </collision>
      </gazebo>
      <link name="rod">

        <!--collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="${camera_link} ${camera_link} ${camera_link}"/>
          </geometry>
        </collision-->

        <visual>
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="0.3 0.01 0.01"/>
          </geometry>
          <material name="red"/>
        </visual>

        <xacro:unless value="${turn_off_all_collisions}">
          <collision>
            <origin xyz="0.15 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.3 0.01 0.01"/>
            </geometry>
          </collision> 
        </xacro:unless>

        <inertial>
          <mass value="0.00001" />
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <inertia
            ixx="0" ixy="0" ixz="0"
            iyx="0" iyy="0" iyz="0"
            izx="0" izy="0" izz="0"/>
        </inertial>

      </link>

      <gazebo reference="rod">
        <material>Gazebo/Red</material>
        <mu1>10.8</mu1>
        <mu2>10.8</mu2>
      </gazebo>

      <!-- Rod joint with reference to the parent link -->
      <joint name="rod_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="end_effector_base"/>
        <child link="rod"/>
      </joint>

      <!-- Add camera only if requested -->
      <xacro:if value="${'rod_with_camera' == manipulator_tool}">
        <xacro:property name="rod_camera_link" value="0.02" />
        <xacro:property name="rod_camera_inertia">
          <inertia
          ixx="1e-8"
          iyy="1e-8"
          izz="1e-8"
          ixy="0.0" ixz="0.0" iyz="0.0" />
        </xacro:property>
        <xacro:property name="rod_camera_mass" value="1e-5"/>

        <xacro:cam
          namespace="$(arg name)"
          camera_name="rod_camera"
          camera_link="${rod_camera_link}"
          camera_mass="${rod_camera_mass}"
          parent="rod">
          <origin xyz="0.3 0 0" rpy="${PI} 0 0"/>
          <xacro:insert_block name="rod_camera_inertia"/>
        </xacro:cam>
      </xacro:if>

      <!-- Add stereo camera only if requested -->
      <xacro:if value="${'rod_with_kinect' == manipulator_tool}">
        <xacro:property name="rod_camera_link" value="0.02" />
        <xacro:property name="rod_camera_inertia">
          <inertia
          ixx="1e-8"
          iyy="1e-8"
          izz="1e-8"
          ixy="0.0" ixz="0.0" iyz="0.0" />
        </xacro:property>
        <xacro:property name="rod_camera_mass" value="1e-5"/>

        <xacro:property name="rod_kinect_transform">
          <origin xyz="0.3 0 0.0" rpy="${PI} 0 0"/>
        </xacro:property>

        <xacro:stereo_cam
          namespace="$(arg name)"
          camera_link="${rod_camera_link}"
          camera_mass="${rod_camera_mass}"
          parent="rod">
          <xacro:insert_block name="rod_kinect_transform"/>  
          <xacro:insert_block name="rod_camera_inertia"/>
        </xacro:stereo_cam>
      </xacro:if>

    </xacro:if>

  </xacro:if>

  <xacro:if value="${'wp_manipulator_3rx' == manipulator_type}">

    <!-- Try to include manipulator -->
    <xacro:include filename="$(find aerial_manipulators_description)/urdf/manipulator_base.urdf.xacro" />
    <xacro:wp_manipulator_3rx parent="base_link">
      <!--origin xyz="0 0 0.2" rpy="${pi/2} 0 0"/-->
      <origin xyz="0 0 0.2" rpy="0 0 0"/>
    </xacro:wp_manipulator_3rx>

    <xacro:transmisija
      trans_number="1"
      joint_name="joint1">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="2"
      joint_name="joint2">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="3"
      joint_name="joint3">
    </xacro:transmisija>

    <xacro:if value="${'camera' == manipulator_tool}">
      <xacro:property name="camera_link" value="0.02" />
      <xacro:property name="camera_inertia">
        <inertia
        ixx="1e-8"
        iyy="1e-8"
        izz="1e-8"
        ixy="0.0" ixz="0.0" iyz="0.0" />
      </xacro:property>
      <xacro:property name="camera_mass" value="1e-5"/>

      <xacro:cam
        camera_link="${camera_link}"
        camera_mass="${camera_mass}"
        parent="end_effector_base">
        <origin xyz="0 0 0" rpy="${PI} 0 0"/>
        <xacro:insert_block name="camera_inertia"/>
      </xacro:cam>
    </xacro:if>

    <!-- Enable the Joint Feedback -->
    <gazebo reference="joint3">
      <stopCfm>0.08</stopCfm>
      <stopErp>0.2</stopErp>
      <implicitSpringDamper>true</implicitSpringDamper>
      <provideFeedback>true</provideFeedback>
    </gazebo>

    <!-- The ft_sensor plugin  -->
    <gazebo>
      <plugin name="ft_sensor" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>1000.0</updateRate>
        <robotNamespace>$(arg name)/wp_manipulator</robotNamespace>
        <topicName>force_sensor/ft_sensor</topicName> 
        <jointName>joint3</jointName>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0001</stddev> <!-- change this to simulate noise --> 
        </noise>
      </plugin>
    </gazebo>

    <xacro:if value="${'rod' == manipulator_tool}">
      <gazebo reference="rod">
        <collision>
          <surface>
            <contact>
              <collide_bitmask>${collision_bitmask}</collide_bitmask>
            </contact>
          </surface>
        </collision>
      </gazebo>
      <!-- Rod link -->
      <link name="rod">

        <!--collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="${camera_link} ${camera_link} ${camera_link}"/>
          </geometry>
        </collision-->

        <visual>
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="0.3 0.01 0.01"/>
          </geometry>
          <material name="red"/>
        </visual>

        <xacro:unless value="${turn_off_all_collisions}">
          <collision>
            <origin xyz="0.15 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.3 0.01 0.01"/>
            </geometry>
          </collision>
        </xacro:unless>

        <inertial>
          <mass value="0.00001" />
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <inertia
            ixx="0" ixy="0" ixz="0"
            iyx="0" iyy="0" iyz="0"
            izx="0" izy="0" izz="0"/>
        </inertial>

      </link>

      <!-- Rod joint with reference to the parent link -->
      <joint name="rod_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="end_effector_base"/>
        <child link="rod"/>
      </joint>

    </xacro:if>

  </xacro:if>

  <xacro:if value="${'asap_manipulator' == manipulator_type}">

    <!-- Try to include manipulator -->
    <xacro:include filename="$(find aerial_manipulators_description)/urdf/manipulator_base.urdf.xacro" />
    <xacro:asap_manipulator parent="base_link">
      <!--origin xyz="0 0 0.2" rpy="${pi/2} 0 0"/-->
      <origin xyz="0 0 0.1" rpy="${pi/2} 0 0"/>
    </xacro:asap_manipulator>

    <xacro:transmisija
      trans_number="1"
      joint_name="joint1">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="2"
      joint_name="joint2">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="3"
      joint_name="joint3">
    </xacro:transmisija>

    <xacro:transmisija
      trans_number="4"
      joint_name="joint4">
    </xacro:transmisija>
   
    <xacro:transmisija
      trans_number="5"
      joint_name="joint5">
    </xacro:transmisija>

    <xacro:if value="${'camera' == manipulator_tool}">
      <xacro:property name="camera_link" value="0.02" />
      <xacro:property name="camera_inertia">
        <inertia
        ixx="1e-8"
        iyy="1e-8"
        izz="1e-8"
        ixy="0.0" ixz="0.0" iyz="0.0" />
      </xacro:property>
      <xacro:property name="camera_mass" value="1e-5"/>

      <xacro:cam
        camera_link="${camera_link}"
        camera_mass="${camera_mass}"
        parent="end_effector_base">
        <origin xyz="0 0 0" rpy="${PI} 0 0"/>
        <xacro:insert_block name="camera_inertia"/>
      </xacro:cam>
    </xacro:if>

    <!-- Enable the Joint Feedback -->
    <gazebo reference="joint5">
      <stopCfm>0.08</stopCfm>
      <stopErp>0.2</stopErp>
      <implicitSpringDamper>true</implicitSpringDamper>
      <provideFeedback>true</provideFeedback>
    </gazebo>

    <!-- The ft_sensor plugin  -->
    <gazebo>
      <plugin name="ft_sensor" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>1000.0</updateRate>
        <robotNamespace>$(arg name)/asap_manipulator</robotNamespace>
        <topicName>force_sensor/ft_sensor</topicName> 
        <jointName>joint5</jointName>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0001</stddev> <!-- change this to simulate noise --> 
        </noise>
      </plugin>
    </gazebo>

    <xacro:if value="${'rod' == manipulator_tool}">
      <gazebo reference="rod">
        <collision>
          <surface>
            <contact>
              <collide_bitmask>${collision_bitmask}</collide_bitmask>
            </contact>
          </surface>
        </collision>
      </gazebo>
      <!-- Rod link -->
      <link name="rod">

        <!--collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="${camera_link} ${camera_link} ${camera_link}"/>
          </geometry>
        </collision-->

        <visual>
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="0.3 0.01 0.01"/>
          </geometry>
          <material name="red"/>
        </visual>

        <xacro:unless value="${turn_off_all_collisions}">
          <collision>
            <origin xyz="0.15 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.3 0.01 0.01"/>
            </geometry>
          </collision>
        </xacro:unless>

        <inertial>
          <mass value="0.00001" />
          <origin xyz="0.15 0 0" rpy="0 0 0"/>
          <inertia
            ixx="0" ixy="0" ixz="0"
            iyx="0" iyy="0" iyz="0"
            izx="0" izy="0" izz="0"/>
        </inertial>

      </link>

      <!-- Rod joint with reference to the parent link -->
      <joint name="rod_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="end_effector_base"/>
        <child link="rod"/>
      </joint>

    </xacro:if>

  </xacro:if>

  <!-- <xacro:camera_macro robot_namespace="${namespace}">
  </xacro:camera_macro> -->

  <!--xacro:transmisija
    trans_number="0"
    joint_name="stick_to_movable_mass_0">
  </xacro:transmisija>

  <xacro:transmisija
    trans_number="1"
    joint_name="stick_to_movable_mass_1">
  </xacro:transmisija>

  <xacro:transmisija
    trans_number="2"
    joint_name="stick_to_movable_mass_2">
  </xacro:transmisija>

  <xacro:transmisija
    trans_number="3"
    joint_name="stick_to_movable_mass_3">
  </xacro:transmisija-->
</robot>
